(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{427:function(n,e,r){"use strict";r.r(e);var t=r(18),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h2",{attrs:{id:"头条面试题-如何使用异步-add-来实现一个-sum-函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#头条面试题-如何使用异步-add-来实现一个-sum-函数"}},[n._v("#")]),n._v(" 头条面试题：如何使用异步 add 来实现一个 sum 函数")]),n._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/F4r6vzm9Mp36fJoV7nBtLg",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://mp.weixin.qq.com/s/F4r6vzm9Mp36fJoV7nBtLg"),r("OutboundLink")],1)])]),n._v(" "),r("blockquote",[r("p",[n._v("这是一道字节跳动的面试题目，见面经 "),r("strong",[n._v("某银行前端一年半经验进字节面经")]),n._v("[1]。山月认为这也是一道水平较高的题目，promise 串行，并行，二分，并发控制，层层递进。")])]),n._v(" "),r("p",[n._v("请实现以下 sum 函数，只能调用 add 进行实现")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("/*\n  请实现一个 sum 函数，接收一个数组 arr 进行累加，并且只能使用add异步方法\n\n  add 函数已实现，模拟异步请求后端返回一个相加后的值\n*/\nfunction add(a, b) {\n  return Promise.resolve(a + b);\n}\n\nfunction sum(arr) {\n\n}\n")])])]),r("p",[r("strong",[n._v("「追加问题：如何控制 add 异步请求的并发次数」")])]),n._v(" "),r("p",[n._v("相关问题：")]),n._v(" "),r("ul",[r("li",[r("strong",[n._v("【Q088】如何实现 promise.map，限制 promise 并发数")]),n._v("[2]")]),n._v(" "),r("li",[r("strong",[n._v("【Q643】如何实现 chunk 函数，数组进行分组")]),n._v("[3]")])]),n._v(" "),r("hr"),n._v(" "),r("hr"),n._v(" "),r("hr"),n._v(" "),r("p",[n._v("以下为答案：")]),n._v(" "),r("p",[n._v("先来一个串行的写法：")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("function sum(arr) {\n  if (arr.length === 1) return arr[0]\n  return arr.reduce((x, y) => Promise.resolve(x).then(x => x + y))\n}\n")])])]),r("p",[n._v("接下来是并行的写法：")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("function add (x, y) {\n  return Promise.resolve(x + y)\n}\n\nfunction chunk (list, size) {\n  const l = []\n  for (let i = 0; i < list.length; i++ ) {\n    const index = Math.floor(i / size)\n    l[index] ??= [];\n    l[index].push(list[i])\n  }\n  return l\n}\n\nasync function sum(arr) {\n  if (arr.length === 1) return arr[0]\n  const promises = chunk(arr, 2).map(([x, y]) => y === undefined ? x : add(x, y))\n  return Promise.all(promises).then(list => sum(list))\n}\n")])])]),r("p",[n._v("如果需要控制并发数，则可以先实现一个 "),r("code",[n._v("pMap")]),n._v(" 用以控制并发")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("function pMap(list, mapper, concurrency = Infinity) {\n  return new Promise((resolve, reject) => {\n    let currentIndex = 0\n    let result = []\n    let resolveCount = 0\n    let len = list.length\n    function next() {\n      const index = currentIndex++\n      Promise.resolve(list[index]).then(o => mapper(o, index)).then(o => {\n        result[index] = o\n        if (++resolveCount === len) { resolve(result) }\n        if (currentIndex < len) { next() }\n      })\n    }\n    for (let i = 0; i < concurrency && i < len; i ++) {\n      next()\n    }\n  })\n}\n\nasync function sum(arr, concurrency) {\n  if (arr.length === 1) return arr[0]\n  return pMap(chunk(arr, 2), ([x, y]) => {\n    return y === undefined ? x : add(x, y)\n  }, concurrency).then(list => sum(list, concurrency))\n}\n")])])]),r("h3",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[n._v("#")]),n._v(" 参考资料")]),n._v(" "),r("p",[n._v("[1]某银行前端一年半经验进字节面经: https://juejin.cn/post/6959364219162607630")]),n._v(" "),r("p",[n._v("[2]【Q088】如何实现 promise.map，限制 promise 并发数: https://github.com/shfshanyue/Daily-Question/issues/89")]),n._v(" "),r("p",[n._v("[3]【Q643】如何实现 chunk 函数，数组进行分组: https://github.com/shfshanyue/Daily-Question/issues/661")])])}),[],!1,null,null,null);e.default=s.exports}}]);