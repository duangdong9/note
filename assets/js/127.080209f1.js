(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{538:function(t,a,e){"use strict";e.r(a);var n=e(18),v=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"详解javascript执行过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#详解javascript执行过程"}},[t._v("#")]),t._v(" 详解JavaScript执行过程")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/_bWxFOaI3xFxwbAzKqOaNA",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s/_bWxFOaI3xFxwbAzKqOaNA"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("js代码的执行，主要分为两个个阶段：编译阶段、执行阶段!本文所有内容基于V8引擎。")])]),t._v(" "),e("h2",{attrs:{id:"_1前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1前言"}},[t._v("#")]),t._v(" 1前言")]),t._v(" "),e("h3",{attrs:{id:"v8引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v8引擎"}},[t._v("#")]),t._v(" v8引擎")]),t._v(" "),e("p",[t._v("v8引擎工作原理：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPXfDgGa9KYrMP3STCAOe2PJiaUAk7Gw6toubck54rq4W9nfDPhacOVNQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("p",[t._v("V8由许多子模块构成，其中这4个模块是最重要的：")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("Parser")]),t._v("：负责将JavaScript源码转换为Abstract Syntax Tree (AST)；")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("如果函数没有被调用，那么是不会被转换成AST的")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Ignition")]),t._v("：interpreter，即解释器，负责将AST转换为Bytecode，解释执行Bytecode；同时收集TurboFan优化编译所需的信息，比如函数参数的类型，有了类型才能进行真实的运算；")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("如果函数只调用一次，Ignition会执行解释执行ByteCode")]),t._v(" "),e("li",[t._v("解释器也有解释执行bytecode的能力")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("通常有两种类型的解释器，"),e("strong",[t._v("基于栈 (Stack-based)**和**基于寄存器 (Register-based)")]),t._v("，基于栈的解释器使用栈来保存函数参数、中间运算结果、变量等；基于寄存器的虚拟机则支持寄存器的指令操作，使用寄存器来保存参数、中间计算结果。通常，基于栈的虚拟机也定义了少量的寄存器，基于寄存器的虚拟机也有堆栈，其区别体现在它们提供的指令集体系。大多数解释器都是基于栈的，比如 "),e("code",[t._v("Java 虚拟机")]),t._v("，"),e("code",[t._v(".Net 虚拟机")]),t._v("，还有"),e("code",[t._v("早期的 V8 虚拟机")]),t._v("。基于堆栈的虚拟机在处理函数调用、解决递归问题和切换上下文时简单明快。而"),e("code",[t._v("现在的 V8 虚拟机")]),t._v("则采用了基于寄存器的设计，它将一些中间数据保存到寄存器中。基于寄存器的解释器架构："),e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qP1dNmS3tbGxBvWvyt38ZiaussWpickHq20FIicicpeDnqkO6hCQdvWWWazw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})])]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("TurboFan")]),t._v("：compiler，即编译器，利用Ignitio所收集的类型信息，将Bytecode转换为优化的汇编代码；")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能;")]),t._v(" "),e("li",[t._v("但是，机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化(比如sum函数原来执行的是number类型，后来执行变成了string类型)，之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码;")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Orinoco")]),t._v("：garbage collector，垃圾回收模块，负责将程序不再需要的内存空间回收；")])])]),t._v(" "),e("h3",{attrs:{id:"提一嘴"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提一嘴"}},[t._v("#")]),t._v(" 提一嘴")]),t._v(" "),e("h4",{attrs:{id:"栈-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[t._v("#")]),t._v(" 栈 stack")]),t._v(" "),e("p",[t._v('栈的特点是"LIFO，即后进先出（Last in, first out）"。数据存储时只能从顶部逐个存入，取出时也需从顶部逐个取出。')]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPLp6LwRb7tJqe202kDc39NmmUlyATrmfUoicVzbZHd7ia7U5hp6xgHRQg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h4",{attrs:{id:"堆-heap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[t._v("#")]),t._v(" 堆 heap")]),t._v(" "),e("p",[t._v('堆的特点是"无序"的key-value"键值对"存储方式。堆的存取方式跟顺序没有关系，不局限出入口。')]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qP0mDicZqeibCOE3ib0RGMUtpzJs5k2Ll6pA2ezTgicBSu8sKOo0o6yRiaSmA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h4",{attrs:{id:"队列-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[t._v("#")]),t._v(" 队列 queue")]),t._v(" "),e("p",[t._v('队列的特点是是"FIFO，即先进先出（First in, first out）" 。数据存取时"从队尾插入，从队头取出"。')]),t._v(" "),e("p",[t._v('"与栈的区别：栈的存入取出都在顶部一个出入口，而队列分两个，一个出口，一个入口"。')]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qP7jhlib9rvak16O0c9uDJHpwtLlibdkTnzOGE0U608css68kcxibDxqnWQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h2",{attrs:{id:"_2编译阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2编译阶段"}},[t._v("#")]),t._v(" 2编译阶段")]),t._v(" "),e("h3",{attrs:{id:"词法分析-scanner"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词法分析-scanner"}},[t._v("#")]),t._v(" 词法分析 Scanner")]),t._v(" "),e("p",[t._v("将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块被称为词法单元（token）。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qP5pWEg7BXaoiaprKhNFT2ZPpekOxZM6rM5N7CrOvUSjRKkibIxSGicMCKw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[\n    {\n        "type": "Keyword",\n        "value": "var"\n    },\n    {\n        "type": "Identifier",\n        "value": "name"\n    },\n    {\n        "type": "Punctuator",\n        "value": "="\n    },\n    {\n        "type": "String",\n        "value": "\'finget\'"\n    },\n    {\n        "type": "Punctuator",\n        "value": ";"\n    }\n]\n')])])]),e("h3",{attrs:{id:"语法分析-parser"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法分析-parser"}},[t._v("#")]),t._v(" 语法分析 Parser")]),t._v(" "),e("p",[t._v("这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "type": "Program",\n  "body": [\n    {\n      "type": "VariableDeclaration",\n      "declarations": [\n        {\n          "type": "VariableDeclarator",\n          "id": {\n            "type": "Identifier",\n            "name": "name"\n          },\n          "init": {\n            "type": "Literal",\n            "value": "finget",\n            "raw": "\'finget\'"\n          }\n        }\n      ],\n      "kind": "var"\n    }\n  ],\n  "sourceType": "script"\n}\n')])])]),e("blockquote",[e("p",[t._v("在此过程中，如果源代码不符合语法规则，则会终止，并抛出“语法错误”。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPPiaPcoaE88vb8CGCjQicFVVxUDZpvdtC62lfOibOu87x3AOSHtfbfffpQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("p",[t._v("这里有个工具，可以实时生成语法树，可以试试esprima。")]),t._v(" "),e("h3",{attrs:{id:"字节码生成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字节码生成"}},[t._v("#")]),t._v(" 字节码生成")]),t._v(" "),e("p",[t._v("可以用"),e("code",[t._v("node node --print-bytecode")]),t._v("查看字节码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// test.js\nfunction getMyname() {\n var myname = 'finget';\n console.log(myname);\n}\ngetMyname();\nnode --print-bytecode test.js \n\n...\n[generated bytecode for function: getMyname (0x10ca700104e9 <SharedFunctionInfo getMyname>)]\nParameter count 1\nRegister count 3\nFrame size 24\n   18 E> 0x10ca70010e86 @    0 : a7                StackCheck \n   37 S> 0x10ca70010e87 @    1 : 12 00             LdaConstant [0]\n         0x10ca70010e89 @    3 : 26 fb             Star r0\n   48 S> 0x10ca70010e8b @    5 : 13 01 00          LdaGlobal [1], [0]\n         0x10ca70010e8e @    8 : 26 f9             Star r2\n   56 E> 0x10ca70010e90 @   10 : 28 f9 02 02       LdaNamedProperty r2, [2], [2]\n         0x10ca70010e94 @   14 : 26 fa             Star r1\n   56 E> 0x10ca70010e96 @   16 : 59 fa f9 fb 04    CallProperty1 r1, r2, r0, [4]\n         0x10ca70010e9b @   21 : 0d                LdaUndefined \n   69 S> 0x10ca70010e9c @   22 : ab                Return \nConstant pool (size = 3)\nHandler Table (size = 0)\n...\n")])])]),e("p",[t._v("这里涉及到一个很重要的概念：JIT（Just-in-time）一边解释，一边执行。")]),t._v(" "),e("p",[t._v("它是如何工作的呢(结合第一张流程图来看)：")]),t._v(" "),e("p",[t._v("1.在 JavaScript 引擎中增加一个监视器（也叫分析器）。监视器监控着代码的运行情况，记录代码一共运行了多少次、如何运行的等信息，如果同一行代码运行了几次，这个代码段就被标记成了 “warm”，如果运行了很多次，则被标记成 “hot”;")]),t._v(" "),e("p",[t._v("2.（基线编译器）如果一段代码变成了 “warm”，那么 JIT 就把它送到基线编译器去编译，并且把编译结果存储起来。比如，监视器监视到了，某行、某个变量执行同样的代码、使用了同样的变量类型，那么就会把编译后的版本，替换这一行代码的执行，并且存储;")]),t._v(" "),e("p",[t._v("3.（优化编译器）如果一个代码段变得 “hot”，监视器会把它发送到优化编译器中。生成一个更快速和高效的代码版本出来，并且存储。例如：循环加一个对象属性时，假设它是 INT 类型，优先做 INT 类型的判断;")]),t._v(" "),e("p",[t._v("4.（反优化 Deoptimization）可是对于 JavaScript 从来就没有确定这么一说，前 99 个对象属性保持着 INT 类型，可能第 100 个就没有这个属性了，那么这时候 JIT 会认为做了一个错误的假设，并且把优化代码丢掉，执行过程将会回到解释器或者基线编译器，这一过程叫做反优化。")]),t._v(" "),e("h3",{attrs:{id:"作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),e("p",[t._v("作用域是一套规则，用来管理引擎如何查找变量。在es5之前，js只有"),e("strong",[t._v("全局作用域")]),t._v("及"),e("strong",[t._v("函数作用域")]),t._v("。es6引入了块级作用域。但是这个块级别作用域需要注意的是不是"),e("code",[t._v("{}")]),t._v("的作用域，而是"),e("code",[t._v("let")]),t._v("，"),e("code",[t._v("const")]),t._v("关键字的"),e("strong",[t._v("块级作用域")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var name = 'FinGet';\n\nfunction fn() {\n  var age = 18;\n  console.log(name);\n}\n")])])]),e("p",[t._v("在解析时就会确定作用域：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPMCwA8nJ0ebVOcIic7lg95hofiaT76EWKDqVy6y573Qceys6Xu6UNksPw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("blockquote",[e("p",[t._v("简单的来说，作用域就是个盒子，规定了变量和函数的可访问范围以及他们的生命周期。")])]),t._v(" "),e("h4",{attrs:{id:"词法作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域"}},[t._v("#")]),t._v(" 词法作用域")]),t._v(" "),e("p",[t._v("词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function fn() {\n    console.log(myName)\n}\nfunction fn1() {\n    var myName = " FinGet "\n    fn()\n}\nvar myName = " global_finget "\nfn1()\n')])])]),e("p",[t._v("上面代码打印的结果是："),e("code",[t._v("global_finget")]),t._v(",这就是因为在编译阶段就已经确定了作用域，"),e("code",[t._v("fn")]),t._v("是定义在全局作用域中的，它在自己内部找不到"),e("code",[t._v("myName")]),t._v("就会去全局作用域中找，不会在"),e("code",[t._v("fn1")]),t._v("中查找。")]),t._v(" "),e("h2",{attrs:{id:"_3执行阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3执行阶段"}},[t._v("#")]),t._v(" 3执行阶段")]),t._v(" "),e("h3",{attrs:{id:"执行上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),e("blockquote",[e("p",[t._v("遇到函数执行的时候，就会创建一个执行上下文。执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。")])]),t._v(" "),e("p",[t._v("JavaScript 中有三种执行上下文类型：")]),t._v(" "),e("ul",[e("li",[t._v("全局执行上下文 (只有一个)")]),t._v(" "),e("li",[t._v("函数执行上下文")]),t._v(" "),e("li",[t._v("eval")])]),t._v(" "),e("p",[t._v("执行上下文的创建分为两个阶段创建：1.创建阶段 2.执行阶段")]),t._v(" "),e("h4",{attrs:{id:"创建阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段"}},[t._v("#")]),t._v(" 创建阶段")]),t._v(" "),e("p",[t._v("在任意的 JavaScript 代码被执行时，执行上下文处于创建阶段。在创建阶段中总共发生了三件事情：")]),t._v(" "),e("ul",[e("li",[t._v("确定 this 的值，也被称为 This Binding")]),t._v(" "),e("li",[t._v("LexicalEnvironment（词法环境） 组件被创建。")]),t._v(" "),e("li",[t._v("VariableEnvironment（变量环境） 组件被创建。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ExecutionContext = {  \n  ThisBinding = <this value>,     // 确定this \n  LexicalEnvironment = { ... },   // 词法环境\n  VariableEnvironment = { ... },  // 变量环境\n}\n")])])]),e("h5",{attrs:{id:"this-binding"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this-binding"}},[t._v("#")]),t._v(" This Binding")]),t._v(" "),e("p",[t._v("在全局执行上下文中，"),e("code",[t._v("this")]),t._v(" 的值指向全局对象，在浏览器中，"),e("code",[t._v("this")]),t._v(" 的值指向 "),e("code",[t._v("window")]),t._v(" 对象。在函数执行上下文中，"),e("code",[t._v("this")]),t._v(" 的值取决于函数的调用方式。如果它被一个对象引用调用，那么 "),e("code",[t._v("this")]),t._v(" 的值被设置为该对象，否则 "),e("code",[t._v("this")]),t._v(" 的值被设置为全局对象或 "),e("code",[t._v("undefined")]),t._v("（严格模式下）。")]),t._v(" "),e("h5",{attrs:{id:"词法环境-lexical-environment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词法环境-lexical-environment"}},[t._v("#")]),t._v(" 词法环境（Lexical Environment）")]),t._v(" "),e("p",[t._v("词法环境是一个包含标识符变量映射的结构。（这里的标识符表示变量/函数的名称，变量是对实际对象【包括函数类型对象】或原始值的引用）。在词法环境中，有两个组成部分：（1）环境记录（environment record） （2）对外部环境的引用")]),t._v(" "),e("ul",[e("li",[t._v("环境记录是"),e("code",[t._v("存储变量")]),t._v("和"),e("code",[t._v("函数声明")]),t._v("的实际位置。")]),t._v(" "),e("li",[t._v("对外部环境的引用意味着它"),e("code",[t._v("可以访问其外部词法环境")]),t._v("。(实现作用域链的重要部分)")])]),t._v(" "),e("p",[t._v("词法环境有两种类型：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("全局环境")]),t._v("（在全局执行上下文中）是一个没有外部环境的词法环境。全局环境的外部环境引用为 null。它拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。")]),t._v(" "),e("li",[e("strong",[t._v("函数环境")]),t._v("，用户在函数中定义的变量被存储在环境记录中。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。")])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：对于函数环境而言，环境记录 还包含了一个 "),e("code",[t._v("arguments")]),t._v(" 对象，该对象包含了索引和传递给函数的参数之间的映射以及传递给函数的参数的长度（数量）。")])]),t._v(" "),e("h5",{attrs:{id:"变量环境-variable-environment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量环境-variable-environment"}},[t._v("#")]),t._v(" 变量环境 Variable Environment")]),t._v(" "),e("p",[t._v("它也是一个词法环境，其 "),e("code",[t._v("EnvironmentRecord")]),t._v(" 包含了由 "),e("code",[t._v("VariableStatements")]),t._v(" 在此执行上下文创建的绑定。")]),t._v(" "),e("p",[t._v("如上所述，变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。")]),t._v(" "),e("p",[t._v("示例代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let a = 20;  \nconst b = 30;  \nvar c;\n\nfunction multiply(e, f) {  \n var g = 20;  \n return e * f * g;  \n}\n\nc = multiply(20, 30);\n")])])]),e("p",[t._v("执行上下文：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('GlobalExectionContext = {\n\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Object",  \n      // 标识符绑定在这里  \n      a: < uninitialized >,  \n      b: < uninitialized >,  \n      multiply: < func >  \n    }  \n    outer: <null>  \n  },\n\n  VariableEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Object",  \n      // 标识符绑定在这里  \n      c: undefined,  \n    }  \n    outer: <null>  \n  }  \n}\n\nFunctionExectionContext = {  \n   \n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Declarative",  \n      // 标识符绑定在这里  \n      Arguments: {0: 20, 1: 30, length: 2},  \n    },  \n    outer: <GlobalLexicalEnvironment>  // 指定全局环境\n  },\n\n  VariableEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Declarative",  \n      // 标识符绑定在这里  \n      g: undefined  \n    },  \n    outer: <GlobalLexicalEnvironment>  \n  }  \n}\n')])])]),e("blockquote",[e("p",[t._v("仔细看上面的："),e("code",[t._v("a: < uninitialized >")]),t._v(","),e("code",[t._v("c: undefined")]),t._v("。所以你在"),e("code",[t._v("let a")]),t._v("定义前"),e("code",[t._v("console.log(a)")]),t._v("的时候会得到"),e("code",[t._v("Uncaught ReferenceError: Cannot access 'a' before initialization")]),t._v("。")])]),t._v(" "),e("h5",{attrs:{id:"为什么要有两个词法环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有两个词法环境"}},[t._v("#")]),t._v(" 为什么要有两个词法环境")]),t._v(" "),e("p",[e("strong",[t._v("变量环境组件")]),t._v("（VariableEnvironment） 是用来登记"),e("code",[t._v("var")]),t._v(" "),e("code",[t._v("function")]),t._v("变量声明，"),e("strong",[t._v("词法环境组件")]),t._v("（LexicalEnvironment）是用来登记"),e("code",[t._v("let")]),t._v(" "),e("code",[t._v("const")]),t._v(" "),e("code",[t._v("class")]),t._v("等变量声明。")]),t._v(" "),e("p",[t._v("在ES6之前都没有块级作用域，ES6之后我们可以用"),e("code",[t._v("let")]),t._v(" "),e("code",[t._v("const")]),t._v("来声明块级作用域，有这两个词法环境是为了实现块级作用域的同时不影响"),e("code",[t._v("var")]),t._v("变量声明和函数声明，具体如下：")]),t._v(" "),e("ol",[e("li",[t._v("首先在一个正在运行的执行上下文内，词法环境由"),e("code",[t._v("LexicalEnvironment")]),t._v("和"),e("code",[t._v("VariableEnvironment")]),t._v("构成，用来登记所有的变量声明。")]),t._v(" "),e("li",[t._v("当执行到块级代码时候，会先"),e("code",[t._v("LexicalEnvironment")]),t._v("记录下来，记录为"),e("code",[t._v("oldEnv")]),t._v("。")]),t._v(" "),e("li",[t._v("创建一个新的"),e("code",[t._v("LexicalEnvironment")]),t._v("（outer指向oldEnv），记录为"),e("code",[t._v("newEnv")]),t._v("，并将"),e("code",[t._v("newEnv")]),t._v("设置为正在执行上下文的"),e("code",[t._v("LexicalEnvironment")]),t._v("。")]),t._v(" "),e("li",[t._v("块级代码内的"),e("code",[t._v("let")]),t._v(" "),e("code",[t._v("const")]),t._v("会登记在"),e("code",[t._v("newEnv")]),t._v("里面，但是"),e("code",[t._v("var")]),t._v("声明和函数声明还是登记在原来的"),e("code",[t._v("VariableEnvironment")]),t._v("里。")]),t._v(" "),e("li",[t._v("块级代码执行结束后，将"),e("code",[t._v("oldEnv")]),t._v("还原为正在执行上下文的"),e("code",[t._v("LexicalEnvironment")]),t._v("。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function foo(){\n    var a = 1\n    let b = 2\n    {\n      let b = 3\n      var c = 4\n      let d = 5\n      console.log(a)\n      console.log(b)\n    }\n    console.log(b) \n    console.log(c)\n    console.log(d)\n}   \nfoo()\n")])])]),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPibicPvd5coUBYiaiakrcbDB7wjv2E7nrYkc9AgbBQlbxOXEgaibiadicyJSCw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("p",[t._v("从图中可以看出，当进入函数的作用域块时，作用域块中通过let声明的变量，会被存放在词法环境的一个单独的区域中，这个区域中的变量并不影响作用域块外面的变量，比如在作用域外面声明了变量b，在该作用域块内部也声明了变量b，当执行到作用域内部时，它们都是独立的存在。")]),t._v(" "),e("p",[t._v("其实，在词法环境内部，维护了一个"),e("strong",[t._v("小型栈结构")]),t._v("，栈底是函数最外层的变量，进入一个作用域块后，就会把该作用域块内部的变量压到栈顶；当作用域执行完成之后，该作用域的信息就会从栈顶弹出，这就是词法环境的结构。需要注意下，我这里所讲的变量是指通过let或者const声明的变量。")]),t._v(" "),e("p",[t._v("再接下来，当执行到作用域块中的"),e("code",[t._v("console.log(a)")]),t._v("这行代码时，就需要在词法环境和变量环境中查找变量a的值了，具体查找方式是：沿着词法环境的栈顶向下查询，如果在词法环境中的某个块中查找到了，就直接返回给JavaScript引擎，如果没有查找到，那么继续在变量环境中查找。")]),t._v(" "),e("h4",{attrs:{id:"执行栈-execution-context-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行栈-execution-context-stack"}},[t._v("#")]),t._v(" 执行栈 Execution Context Stack")]),t._v(" "),e("p",[t._v("每个函数都会有自己的执行上下文，多个执行上下文就会以栈(调用栈)的方式来管理。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function a () {\n  console.log('In fn a')\n  function b () {\n    console.log('In fn b')\n    function c () {\n      console.log('In fn c')\n    }\n    c()\n  }\n  b()\n}\na()\n")])])]),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qP5AOic5zfh6WHOa93DQwUCZya0RhvvDlj7JBpLSmsJoM5pzoj3wzLrbQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPRIWe8Y1paDbKSnABVicich3kL8DuuzQTDGrquMUd4G6tiaz3u4IXQSyPg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("p",[t._v("可以用这个工具试一下，更直观的观察进栈和出栈javascript visualizer 工具。")]),t._v(" "),e("blockquote",[e("p",[t._v("看这个图就可以看出作用域链了吧，很直观。作用域链就是在"),e("strong",[t._v("执行上下文创建阶段")]),t._v("确定的。有了执行的环境，才能确定它应该和谁构成作用域链。")])]),t._v(" "),e("h2",{attrs:{id:"_4v8垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4v8垃圾回收"}},[t._v("#")]),t._v(" 4V8垃圾回收")]),t._v(" "),e("h3",{attrs:{id:"内存分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存分配"}},[t._v("#")]),t._v(" 内存分配")]),t._v(" "),e("h4",{attrs:{id:"栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),e("p",[t._v("栈是临时存储空间，主要存储局部变量和函数调用，内小且存储连续，操作起来简单方便，一般由系统"),e("strong",[t._v("自动分配")]),t._v("，"),e("strong",[t._v("自动回收")]),t._v("，所以文章内所说的垃圾回收，都是基于堆内存。")]),t._v(" "),e("p",[t._v("基本类型数据（Number, Boolean, String, Null, Undefined, Symbol, BigInt）保存在在栈内存中。引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中。")]),t._v(" "),e("p",[t._v("为什么基本数据类型存储在栈中，引用数据类型存储在堆中？")]),t._v(" "),e("p",[t._v("JavaScript引擎需要用栈来维护程序执行期间的上下文的状态，如果栈空间大了的话，所有数据都存放在栈空间里面，会影响到上下文切换的效率，进而影响整个程序的执行效率。")]),t._v(" "),e("h4",{attrs:{id:"堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPhOLza7aBosKDv2lyG2F5T1sMiba3Aej1csYjmOMy5h7muRaALtxibSOA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("p",[t._v("这里用来存储对象和动态数据，这是内存中最大的区域，并且是GC(Garbage collection 垃圾回收)工作的地方。不过，并不是所有的堆内存都可以进行GC，只有新生代和老生代被GC管理。堆可以进一步细分为下面这样：")]),t._v(" "),e("ul",[e("li",[t._v("新生代空间：是最新产生的数据存活的地方，这些数据往往都是短暂的。这个空间被一分为二，然后被Scavenger(Minor GC)所管理。稍后会介绍。可以通过V8标志如 --max_semi_space_size 或 --min_semi_space_size 来控制新生代空间大小")]),t._v(" "),e("li",[t._v("老生代空间：是从新生代空间经过至少两轮Minor GC仍然存活下来的数据，该空间被Major GC(Mark-Sweep & Mark-Compact)管理，稍后会介绍。可以通过 --initial_old_space_size 或 --max_old_space_size控制空间大小。")])]),t._v(" "),e("p",[t._v("Old pointer space：存活下来的包含指向其他对象指针的对象")]),t._v(" "),e("p",[t._v("Old data space：存活下来的只包含数据的对象。")]),t._v(" "),e("ul",[e("li",[t._v("大对象空间：这是比空间大小还要大的对象，大对象不会被gc处理。")]),t._v(" "),e("li",[t._v("代码空间：这里是JIT所编译的代码。这是除了在大对象空间中分配代码并执行之外的唯一可执行的空间。")]),t._v(" "),e("li",[t._v("map空间：存放 Cell 和 Map，每个区域都是存放相同大小的元素，结构简单。")])]),t._v(" "),e("h3",{attrs:{id:"代际假说"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代际假说"}},[t._v("#")]),t._v(" 代际假说")]),t._v(" "),e("p",[t._v("代际假说有以下两个特点：")]),t._v(" "),e("ul",[e("li",[t._v("第一个是大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问；")]),t._v(" "),e("li",[t._v("第二个是不死的对象，会活得更久。")])]),t._v(" "),e("p",[t._v("在 V8 中会把堆分为"),e("strong",[t._v("新生代")]),t._v("和"),e("strong",[t._v("老生代")]),t._v("两个区域，新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。")]),t._v(" "),e("p",[t._v("新生区通常只支持 1～8M 的容量，而老生区支持的容量就大很多了。对于这两块区域，V8 分别使用两个不同的垃圾回收器，以便更高效地实施垃圾回收。")]),t._v(" "),e("ul",[e("li",[t._v("副垃圾回收器，主要负责新生代的垃圾回收。")]),t._v(" "),e("li",[t._v("主垃圾回收器，主要负责老生代的垃圾回收。")])]),t._v(" "),e("p",[t._v("新生代中用"),e("code",[t._v("Scavenge")]),t._v("算法来处理。所谓 "),e("code",[t._v("Scavenge")]),t._v(" 算法，是把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPPotbO7s5amiccZRibBX8Dp19iaB2HGf33yqrQiaD3vmXPyZhcjqdQIRozA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h3",{attrs:{id:"新生代回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新生代回收"}},[t._v("#")]),t._v(" 新生代回收")]),t._v(" "),e("p",[t._v("新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾清理操作。")]),t._v(" "),e("ol",[e("li",[t._v("先标记需要回收的对象，然后把对象区激活对象复制到空闲区，并排序；"),e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPPQOicn7JVn35Hd1XkjubylicxuK5TkYrxFzJETVqo0iajq6xbVpCq5zGQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("li",[t._v("完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域。"),e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPibkwCSDVfpjKZ5cPVFYhDibK0lxakhc4vc0s5vDVCztG5yfKIq0XnJJw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})])]),t._v(" "),e("p",[t._v("由于新生代中采用的 Scavenge 算法，所以每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域。但复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，一般新生区的空间会被设置得比较小。")]),t._v(" "),e("p",[t._v("也正是因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了对象晋升策略，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。")]),t._v(" "),e("h3",{attrs:{id:"老生代回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#老生代回收"}},[t._v("#")]),t._v(" 老生代回收")]),t._v(" "),e("h4",{attrs:{id:"mark-sweep"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mark-sweep"}},[t._v("#")]),t._v(" Mark-Sweep")]),t._v(" "),e("p",[t._v("Mark-Sweep处理时分为两阶段，标记阶段和清理阶段，看起来与Scavenge类似，不同的是，Scavenge算法是复制活动对象，而由于在老生代中活动对象占大多数，所以Mark-Sweep在标记了活动对象和非活动对象之后，直接把非活动对象清除。")]),t._v(" "),e("ul",[e("li",[t._v("标记阶段：对老生代进行第一次扫描，标记活动对象")]),t._v(" "),e("li",[t._v("清理阶段：对老生代进行第二次扫描，清除未被标记的对象，即清理非活动对象")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qP5D6lAwPicMwN8U60h8Hq9syIDYW4GNjQVibyclDIuCsI4oQWRSom0mDg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h4",{attrs:{id:"mark-compact"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mark-compact"}},[t._v("#")]),t._v(" Mark-Compact")]),t._v(" "),e("p",[t._v("由于Mark-Sweep完成之后，老生代的内存中产生了很多内存碎片，若不清理这些内存碎片，如果出现需要分配一个大对象的时候，这时所有的碎片空间都完全无法完成分配，就会提前触发垃圾回收，而这次回收其实不是必要的。")]),t._v(" "),e("p",[t._v("为了解决内存碎片问题，Mark-Compact被提出，它是在是在 Mark-Sweep的基础上演进而来的，相比Mark-Sweep，Mark-Compact添加了活动对象整理阶段，将所有的活动对象往一端移动，移动完成后，直接清理掉边界外的内存。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPJcV0wVliaNl39FwZcSN9tKPmyiciciaicLMhiaFFkKUfWWxFsNDseYgfia3gw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h3",{attrs:{id:"全停顿-stop-the-world"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全停顿-stop-the-world"}},[t._v("#")]),t._v(" 全停顿 Stop-The-World")]),t._v(" "),e("p",[t._v("垃圾回收如果耗费时间，那么主线程的JS操作就要停下来等待垃圾回收完成继续执行，我们把这种行为叫做全停顿（Stop-The-World）。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPibQ2rytnhKaA6wGM2ZJyEpe2PAuc0liaaSibyiadvYW1d8S7nhnsL5wOYw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h4",{attrs:{id:"增量标记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增量标记"}},[t._v("#")]),t._v(" 增量标记")]),t._v(" "),e("p",[t._v("为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，我们把这个算法称为增量标记（Incremental Marking）算法。如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPoIwx74QgzNXe1KyeuLeSdbAZgqK70Y4wbBlpdOEcsic7NSB6UMEAwnw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h4",{attrs:{id:"惰性清理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#惰性清理"}},[t._v("#")]),t._v(" 惰性清理")]),t._v(" "),e("p",[t._v("增量标记只是对活动对象和非活动对象进行标记，惰性清理用来真正的清理释放内存。当增量标记完成后，假如当前的可用内存足以让我们快速的执行代码，其实我们是没必要立即清理内存的，可以将清理的过程延迟一下，让JavaScript逻辑代码先执行，也无需一次性清理完所有非活动对象内存，垃圾回收器会按需逐一进行清理，直到所有的页都清理完毕。")]),t._v(" "),e("h4",{attrs:{id:"并发回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发回收"}},[t._v("#")]),t._v(" 并发回收")]),t._v(" "),e("p",[t._v("并发式GC允许在在垃圾回收的同时不需要将主线程挂起，两者可以同时进行，只有在个别时候需要短暂停下来让垃圾回收器做一些特殊的操作。但是这种方式也要面对增量回收的问题，就是在垃圾回收过程中，由于JavaScript代码在执行，堆中的对象的引用关系随时可能会变化，所以也要进行写屏障操作。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPiab06CO5ku4QNsJ4NYOea19W7paMLgQaj3Ar9ibj3pquH6Qlznu3Rnnw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),t._v(" "),e("h4",{attrs:{id:"并行回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并行回收"}},[t._v("#")]),t._v(" 并行回收")]),t._v(" "),e("p",[t._v("并行式GC允许主线程和辅助线程同时执行同样的GC工作，这样可以让辅助线程来分担主线程的GC工作，使得垃圾回收所耗费的时间等于总时间除以参与的线程数量（加上一些同步开销）。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/zewrLkrYfsOKp8lrAKmZtiaV5IyWTG5qPfn5Gh1d5npxoT1sFArBYIHsNoK8d2FhpMuQgkkjUoiaicEkhWm2zNgqQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})])])}),[],!1,null,null,null);a.default=v.exports}}]);