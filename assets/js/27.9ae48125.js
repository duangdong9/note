(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{440:function(e,t,a){"use strict";a.r(t);var v=a(18),o=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"页面生命周期-domcontentloaded-load-beforeunload-unload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面生命周期-domcontentloaded-load-beforeunload-unload"}},[e._v("#")]),e._v(" 页面生命周期：DOMContentLoaded，load，beforeunload，unload")]),e._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/TdHGLka-xlr8ER4BD2cjxQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://mp.weixin.qq.com/s/TdHGLka-xlr8ER4BD2cjxQ"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("HTML 页面的生命周期包含三个重要事件：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("DOMContentLoaded")]),e._v(" —— 浏览器已完全加载 HTML，并构建了 DOM 树，但像 "),a("code",[e._v("<img>")]),e._v(" 和样式表之类的外部资源可能尚未加载完成。")]),e._v(" "),a("li",[a("code",[e._v("load")]),e._v(" —— 浏览器不仅加载完成了 HTML，还加载完成了所有外部资源：图片，样式等。")]),e._v(" "),a("li",[a("code",[e._v("beforeunload/unload")]),e._v(" —— 当用户正在离开页面时。")])]),e._v(" "),a("p",[e._v("每个事件都是有用的：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("DOMContentLoaded")]),e._v(" 事件 —— DOM 已经就绪，因此处理程序可以查找 DOM 节点，并初始化接口。")]),e._v(" "),a("li",[a("code",[e._v("load")]),e._v(" 事件 —— 外部资源已加载完成，样式已被应用，图片大小也已知了。")]),e._v(" "),a("li",[a("code",[e._v("beforeunload")]),e._v(" 事件 —— 用户正在离开：我们可以检查用户是否保存了更改，并询问他是否真的要离开。")]),e._v(" "),a("li",[a("code",[e._v("unload")]),e._v(" 事件 —— 用户几乎已经离开了，但是我们仍然可以启动一些操作，例如发送统计数据。")])]),e._v(" "),a("p",[e._v("我们探索一下这些事件的细节。")]),e._v(" "),a("h2",{attrs:{id:"domcontentloaded"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domcontentloaded"}},[e._v("#")]),e._v(" DOMContentLoaded")]),e._v(" "),a("p",[a("code",[e._v("DOMContentLoaded")]),e._v(" 事件发生在 "),a("code",[e._v("document")]),e._v(" 对象上。")]),e._v(" "),a("p",[e._v("我们必须使用 "),a("code",[e._v("addEventListener")]),e._v(" 来捕获它：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.addEventListener("DOMContentLoaded", ready);\n// 不是 "document.onDOMContentLoaded = ..."\n')])])]),a("p",[e._v("例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script>\n  function ready() {\n    alert(\'DOM is ready\');\n\n    // 图片目前尚未加载完成（除非已经被缓存），所以图片的大小为 0x0\n    alert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n  }\n\n  document.addEventListener("DOMContentLoaded", ready);\n<\/script>\n\n<img id="img" src="https://en.js.cx/clipart/train.gif?speed=1&cache=0">\n')])])]),a("p",[e._v("在示例中，"),a("code",[e._v("DOMContentLoaded")]),e._v(" 处理程序在文档加载完成后触发，所以它可以查看所有元素，包括它下面的 "),a("code",[e._v("<img>")]),e._v(" 元素。")]),e._v(" "),a("p",[e._v("但是，它不会等待图片加载。因此，"),a("code",[e._v("alert")]),e._v(" 显示其大小为零。")]),e._v(" "),a("p",[e._v("乍一看，"),a("code",[e._v("DOMContentLoaded")]),e._v(" 事件非常简单。DOM 树准备就绪 —— 这是它的触发条件。它并没有什么特别之处。")]),e._v(" "),a("h3",{attrs:{id:"domcontentloaded-和脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domcontentloaded-和脚本"}},[e._v("#")]),e._v(" DOMContentLoaded 和脚本")]),e._v(" "),a("p",[e._v("当浏览器处理一个 HTML 文档，并在文档中遇到 "),a("code",[e._v("<script>")]),e._v(" 标签时，就会在继续构建 DOM 之前运行它。这是一种防范措施，因为脚本可能想要修改 DOM，甚至对其执行 "),a("code",[e._v("document.write")]),e._v("操作，所以 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 必须等待脚本执行结束。")]),e._v(" "),a("p",[e._v("因此，"),a("code",[e._v("DOMContentLoaded")]),e._v(" 肯定在下面的这些脚本执行结束之后发生：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script>\n  document.addEventListener("DOMContentLoaded", () => {\n    alert("DOM ready!");\n  });\n<\/script>\n\n<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js"><\/script>\n\n<script>\n  alert("Library loaded, inline script executed");\n<\/script>\n')])])]),a("p",[e._v('在上面这个例子中，我们首先会看到 "Library loaded..."，然后才会看到 "DOM ready!"（所有脚本都已经执行结束）。')]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("不会阻塞 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 的脚本：")])]),e._v(" "),a("p",[e._v("此规则有两个例外：")]),e._v(" "),a("ol",[a("li",[e._v("具有 "),a("code",[e._v("async")]),e._v(" 特性（attribute）的脚本不会阻塞 "),a("code",[e._v("DOMContentLoaded")]),e._v("，"),a("strong",[e._v("稍后")]),e._v("[1] 我们会讲到。")]),e._v(" "),a("li",[e._v("使用 "),a("code",[e._v("document.createElement('script')")]),e._v(" 动态生成并添加到网页的脚本也不会阻塞 "),a("code",[e._v("DOMContentLoaded")]),e._v("。")])])]),e._v(" "),a("h3",{attrs:{id:"domcontentloaded-和样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domcontentloaded-和样式"}},[e._v("#")]),e._v(" DOMContentLoaded 和样式")]),e._v(" "),a("p",[e._v("外部样式表不会影响 DOM，因此 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 不会等待它们。")]),e._v(" "),a("p",[e._v("但这里有一个陷阱。如果在样式后面有一个脚本，那么该脚本必须等待样式表加载完成：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<link type="text/css" rel="stylesheet" href="style.css">\n<script>\n  // 在样式表加载完成之前，脚本都不会执行\n  alert(getComputedStyle(document.body).marginTop);\n<\/script>\n')])])]),a("p",[e._v("原因是，脚本可能想要获取元素的坐标和其他与样式相关的属性，如上例所示。因此，它必须等待样式加载完成。")]),e._v(" "),a("p",[e._v("当 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 等待脚本时，它现在也在等待脚本前面的样式。")]),e._v(" "),a("h3",{attrs:{id:"浏览器内建的自动填充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内建的自动填充"}},[e._v("#")]),e._v(" 浏览器内建的自动填充")]),e._v(" "),a("p",[e._v("Firefox，Chrome 和 Opera 都会在 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 中自动填充表单。")]),e._v(" "),a("p",[e._v("例如，如果页面有一个带有登录名和密码的表单，并且浏览器记住了这些值，那么在 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 上，浏览器会尝试自动填充它们（如果得到了用户允许）。")]),e._v(" "),a("p",[e._v("因此，如果 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 被需要加载很长时间的脚本延迟触发，那么自动填充也会等待。你可能在某些网站上看到过（如果你使用浏览器自动填充）—— 登录名/密码字段不会立即自动填充，而是在页面被完全加载前会延迟填充。这实际上是 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 事件之前的延迟。")]),e._v(" "),a("h2",{attrs:{id:"window-onload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-onload"}},[e._v("#")]),e._v(" window.onload")]),e._v(" "),a("p",[e._v("当整个页面，包括样式、图片和其他资源被加载完成时，会触发 "),a("code",[e._v("window")]),e._v(" 对象上的 "),a("code",[e._v("load")]),e._v(" 事件。可以通过 "),a("code",[e._v("onload")]),e._v(" 属性获取此事件。")]),e._v(" "),a("p",[e._v("下面的这个示例正确显示了图片大小，因为 "),a("code",[e._v("window.onload")]),e._v(" 会等待所有图片加载完毕：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script>\n  window.onload = function() { // 与此相同 window.addEventListener('load', (event) => {\n    alert('Page loaded');\n\n    // 此时图片已经加载完成\n    alert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n  };\n<\/script>\n\n<img id=\"img\" src=\"https://en.js.cx/clipart/train.gif?speed=1&cache=0\">\n")])])]),a("h2",{attrs:{id:"window-onunload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-onunload"}},[e._v("#")]),e._v(" window.onunload")]),e._v(" "),a("p",[e._v("当访问者离开页面时，"),a("code",[e._v("window")]),e._v(" 对象上的 "),a("code",[e._v("unload")]),e._v(" 事件就会被触发。我们可以在那里做一些不涉及延迟的操作，例如关闭相关的弹出窗口。")]),e._v(" "),a("p",[e._v("有一个值得注意的特殊情况是发送分析数据。")]),e._v(" "),a("p",[e._v("假设我们收集有关页面使用情况的数据：鼠标点击，滚动，被查看的页面区域等。")]),e._v(" "),a("p",[e._v("自然地，当用户要离开的时候，我们希望通过 "),a("code",[e._v("unload")]),e._v(" 事件将数据保存到我们的服务器上。")]),e._v(" "),a("p",[e._v("有一个特殊的 "),a("code",[e._v("navigator.sendBeacon(url, data)")]),e._v(" 方法可以满足这种需求，详见规范 https://w3c.github.io/beacon/。")]),e._v(" "),a("p",[e._v("它在后台发送数据，转换到另外一个页面不会有延迟：浏览器离开页面，但仍然在执行 "),a("code",[e._v("sendBeacon")]),e._v("。")]),e._v(" "),a("p",[e._v("使用方式如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let analyticsData = { /* 带有收集的数据的对象 */ };\n\nwindow.addEventListener("unload", function() {\n  navigator.sendBeacon("/analytics", JSON.stringify(analyticsData));\n});\n')])])]),a("ul",[a("li",[e._v("请求以 POST 方式发送。")]),e._v(" "),a("li",[e._v("我们不仅能发送字符串，还能发送表单以及其他格式的数据，在 Fetch 一章有详细讲解，但通常它是一个字符串化的对象。")]),e._v(" "),a("li",[e._v("数据大小限制在 64kb。")])]),e._v(" "),a("p",[e._v("当 "),a("code",[e._v("sendBeacon")]),e._v(" 请求完成时，浏览器可能已经离开了文档，所以就无法获取服务器响应（对于分析数据来说通常为空）。")]),e._v(" "),a("p",[e._v("还有一个 "),a("code",[e._v("keep-alive")]),e._v(" 标志，该标志用于在 "),a("strong",[e._v("fetch")]),e._v("[2] 方法中为通用的网络请求执行此类“离开页面后”的请求。你可以在 "),a("strong",[e._v("Fetch API")]),e._v("[3] 一章中找到更多相关信息。")]),e._v(" "),a("p",[e._v("如果我们要取消跳转到另一页面的操作，在这里做不到。但是我们可以使用另一个事件 —— "),a("code",[e._v("onbeforeunload")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"window-onbeforeunload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-onbeforeunload"}},[e._v("#")]),e._v(" window.onbeforeunload")]),e._v(" "),a("p",[e._v("如果访问者触发了离开页面的导航（navigation）或试图关闭窗口，"),a("code",[e._v("beforeunload")]),e._v(" 处理程序将要求进行更多确认。")]),e._v(" "),a("p",[e._v("如果我们要取消事件，浏览器会询问用户是否确定。")]),e._v(" "),a("p",[e._v("你可以通过运行下面这段代码，然后重新加载页面来进行尝试：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.onbeforeunload = function() {\n  return false;\n};\n")])])]),a("p",[e._v("由于历史原因，返回非空字符串也被视为取消事件。在以前，浏览器曾经将其显示为消息，但是根据 "),a("strong",[e._v("现代规范")]),e._v("[4] 所述，它们不应该这样。")]),e._v(" "),a("p",[e._v("这里有个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('window.onbeforeunload = function() {\n  return "There are unsaved changes. Leave now?";\n};\n')])])]),a("p",[e._v("它的行为已经改变了，因为有些站长通过显示误导性和恶意信息滥用了此事件处理程序。所以，目前一些旧的浏览器可能仍将其显示为消息，但除此之外 —— 无法自定义显示给用户的消息。")]),e._v(" "),a("h2",{attrs:{id:"readystate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readystate"}},[e._v("#")]),e._v(" readyState")]),e._v(" "),a("p",[e._v("如果我们将 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 事件处理程序设置在文档加载完成之后，会发生什么？")]),e._v(" "),a("p",[e._v("很自然地，它永远不会运行。")]),e._v(" "),a("p",[e._v("在某些情况下，我们不确定文档是否已经准备就绪。我们希望我们的函数在 DOM 加载完成时执行，无论现在还是以后。")]),e._v(" "),a("p",[a("code",[e._v("document.readyState")]),e._v(" 属性可以为我们提供当前加载状态的信息。")]),e._v(" "),a("p",[e._v("它有 3 个可能值：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("loading")]),e._v(" —— 文档正在被加载。")]),e._v(" "),a("li",[a("code",[e._v("interactive")]),e._v(" —— 文档被全部读取。")]),e._v(" "),a("li",[a("code",[e._v("complete")]),e._v(" —— 文档被全部读取，并且所有资源（例如图片等）都已加载完成。")])]),e._v(" "),a("p",[e._v("所以，我们可以检查 "),a("code",[e._v("document.readyState")]),e._v(" 并设置一个处理程序，或在代码准备就绪时立即执行它。")]),e._v(" "),a("p",[e._v("像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function work() { /*...*/ }\n\nif (document.readyState == 'loading') {\n  // 仍在加载，等待事件\n  document.addEventListener('DOMContentLoaded', work);\n} else {\n  // DOM 已就绪！\n  work();\n}\n")])])]),a("p",[e._v("还有一个 "),a("code",[e._v("readystatechange")]),e._v(" 事件，会在状态发生改变时触发，因此我们可以打印所有这些状态，就像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 当前状态\nconsole.log(document.readyState);\n\n// 状态改变时打印它\ndocument.addEventListener('readystatechange', () => console.log(document.readyState));\n")])])]),a("p",[a("code",[e._v("readystatechange")]),e._v(" 事件是跟踪文档加载状态的另一种机制，它很早就存在了。现在则很少被使用。")]),e._v(" "),a("p",[e._v("但是为了完整起见，让我们看看完整的事件流。")]),e._v(" "),a("p",[e._v("这是一个带有 "),a("code",[e._v("<iframe>")]),e._v("，"),a("code",[e._v("<img>")]),e._v(" 和记录事件的处理程序的文档：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script>\n  log('initial readyState:' + document.readyState);\n\n  document.addEventListener('readystatechange', () => log('readyState:' + document.readyState));\n  document.addEventListener('DOMContentLoaded', () => log('DOMContentLoaded'));\n\n  window.onload = () => log('window onload');\n<\/script>\n\n<iframe src=\"iframe.html\" onload=\"log('iframe onload')\"></iframe>\n\n<img src=\"http://en.js.cx/clipart/train.gif\" id=\"img\">\n<script>\n  img.onload = () => log('img onload');\n<\/script>\n")])])]),a("p",[e._v("此示例运行 "),a("strong",[e._v("在 sandbox 中")]),e._v("[5]。")]),e._v(" "),a("p",[e._v("典型输出：")]),e._v(" "),a("ol",[a("li",[e._v("[1] initial readyState:loading")]),e._v(" "),a("li",[e._v("[2] readyState:interactive")]),e._v(" "),a("li",[e._v("[2] DOMContentLoaded")]),e._v(" "),a("li",[e._v("[3] iframe onload")]),e._v(" "),a("li",[e._v("[4] img onload")]),e._v(" "),a("li",[e._v("[4] readyState:complete")]),e._v(" "),a("li",[e._v("[4] window onload")])]),e._v(" "),a("p",[e._v("方括号中的数字表示发生这种情况的大致时间。标有相同数字的事件几乎是同时发生的（+- 几毫秒）。")]),e._v(" "),a("ul",[a("li",[e._v("在 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 之前，"),a("code",[e._v("document.readyState")]),e._v(" 会立即变成 "),a("code",[e._v("interactive")]),e._v("。它们俩的意义实际上是相同的。")]),e._v(" "),a("li",[e._v("当所有资源（"),a("code",[e._v("iframe")]),e._v(" 和 "),a("code",[e._v("img")]),e._v("）都加载完成后，"),a("code",[e._v("document.readyState")]),e._v(" 变成 "),a("code",[e._v("complete")]),e._v("。这里我们可以发现，它与 "),a("code",[e._v("img.onload")]),e._v("（"),a("code",[e._v("img")]),e._v(" 是最后一个资源）和 "),a("code",[e._v("window.onload")]),e._v(" 几乎同时发生。转换到 "),a("code",[e._v("complete")]),e._v(" 状态的意义与 "),a("code",[e._v("window.onload")]),e._v(" 相同。区别在于 "),a("code",[e._v("window.onload")]),e._v(" 始终在所有其他 "),a("code",[e._v("load")]),e._v(" 处理程序之后运行。")])]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("页面生命周期事件：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("当 DOM 准备就绪时，"),a("code",[e._v("document")]),e._v(" 上的 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 事件就会被触发。在这个阶段，我们可以将 JavaScript 应用于元素。")])]),e._v(" "),a("li",[a("ul",[a("li",[e._v("诸如 "),a("code",[e._v("<script>...<\/script>")]),e._v(" 或 "),a("code",[e._v('<script src="..."><\/script>')]),e._v(" 之类的脚本会阻塞  "),a("code",[e._v("DOMContentLoaded")]),e._v("，浏览器将等待它们执行结束。")]),e._v(" "),a("li",[e._v("图片和其他资源仍然可以继续被加载。")])])]),e._v(" "),a("li",[a("p",[e._v("当页面和所有资源都加载完成时，"),a("code",[e._v("window")]),e._v(" 上的 "),a("code",[e._v("load")]),e._v(" 事件就会被触发。我们很少使用它，因为通常无需等待那么长时间。")])]),e._v(" "),a("li",[a("p",[e._v("当用户想要离开页面时，"),a("code",[e._v("window")]),e._v(" 上的 "),a("code",[e._v("beforeunload")]),e._v(" 事件就会被触发。如果我们取消这个事件，浏览器就会询问我们是否真的要离开（例如，我们有未保存的更改）。")])]),e._v(" "),a("li",[a("p",[e._v("当用户最终离开时，"),a("code",[e._v("window")]),e._v(" 上的 "),a("code",[e._v("unload")]),e._v(" 事件就会被触发。在处理程序中，我们只能执行不涉及延迟或询问用户的简单操作。正是由于这个限制，它很少被使用。我们可以使用 "),a("code",[e._v("navigator.sendBeacon")]),e._v(" 来发送网络请求。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("document.readyState")]),e._v(" 是文档的当前状态，可以在 "),a("code",[e._v("readystatechange")]),e._v(" 事件中跟踪状态更改：")])]),e._v(" "),a("li",[a("ul",[a("li",[a("code",[e._v("loading")]),e._v(" —— 文档正在被加载。")]),e._v(" "),a("li",[a("code",[e._v("interactive")]),e._v(" —— 文档已被解析完成，与 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 几乎同时发生，但是在 "),a("code",[e._v("DOMContentLoaded")]),e._v(" 之前发生。")]),e._v(" "),a("li",[a("code",[e._v("complete")]),e._v(" —— 文档和资源均已加载完成，与 "),a("code",[e._v("window.onload")]),e._v(" 几乎同时发生，但是在 "),a("code",[e._v("window.onload")]),e._v(" 之前发生。")])])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("现代 JavaScript 教程：开源的现代 JavaScript 从入门到进阶的优质教程。"),a("strong",[e._v("React 官方文档推荐，与 MDN 并列的 JavaScript 学习教程")]),e._v("[6]。")]),e._v(" "),a("p",[e._v("在线免费阅读：https://zh.javascript.info")])]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),a("p",[e._v("[1]稍后: "),a("em",[e._v("https://zh.javascript.info/script-async-defer")]),e._v("[2]fetch: "),a("em",[e._v("https://zh.javascript.info/fetch")]),e._v("[3]Fetch API: "),a("em",[e._v("https://zh.javascript.info/fetch-api")]),e._v("[4]现代规范: "),a("em",[e._v("https://html.spec.whatwg.org/#unloading-documents")]),e._v("[5]在 sandbox 中: "),a("em",[e._v("https://plnkr.co/edit/ct5SNvrHCA75b2KZ?p=preview")]),e._v("[6]React 官方文档推荐，与 MDN 并列的 JavaScript 学习教程: "),a("em",[e._v("https://zh-hans.reactjs.org/docs/getting-started.html#javascript-resources")])])])}),[],!1,null,null,null);t.default=o.exports}}]);