(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{517:function(s,a,e){"use strict";e.r(a);var t=e(18),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"babel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[s._v("#")]),s._v(" babel")]),s._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.Babel7的相关包都挂在了@babel域下。比如之前的babel-cli包现在更名为@babel/cli。\n2.@babel/preset-env囊括了以前所有以年份命名的presets的功能。\n3.babel-node从CLI中提取出来成了一个独立的包：@babel/node。\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    在最后，我们添加一些`npm`命令到我们的`package.json`文件。\n\n  - 添加`start`命令 ：`nodemon --exec babel-node src/server.js `。这个命令是告诉`nodemon`去监听文件的变化，一旦检测到有文件发生了变化，就会重启并用babel-node去运行`src/server.js`文件。这个命令一般用于本地开发。\n  - 添加`build`命令：`babel src --out-dir dist`。这个命令是告诉babel去编译`src`里的源文件，并将得到的结果输出到`dist`中\n  - 添加`serve`命令：`node dist/server.js`。这个命令是让我们用node运行我们编译好的文件。可能有人会问，为什么我们不直接用nodemon去运行我们的程序呢？这是因为相较于node,使用nodemon运行我们的程序会使用更多的内存，花费更多的启动时间。\n")])])]),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"scripts"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nodemon --exec babel-node src/server.js"')]),s._v(",\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"build"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"babel src --out-dir dist"')]),s._v(",\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"serve"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node dist/server.js"')]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(",\n")])])]),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# // 添加仓库")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo\n  yum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v("\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);